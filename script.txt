local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")
local PathfindingService = game:GetService("PathfindingService")

local retrieveUrl = "http://68.183.48.109:8080/retrieve-data"

local npc = game:GetService("ReplicatedStorage").Puppets:FindFirstChild("Daemon6109"):Clone()
npc.Parent = workspace
local humanoid = npc:FindFirstChild("Humanoid")

local function getData(key, count)
	local success, response = pcall(function()
		local url = retrieveUrl .. "?key=" .. HttpService:UrlEncode(key)
		if count then
			url = url .. "&count=" .. count
		end
		return HttpService:GetAsync(url)
	end)
	return success and response or nil
end

local function stringToVector3(positionString)
	local success, position = pcall(function()
		local x, y, z = positionString:match("(%-?%d+%.?%d*),%s*(%-?%d+%.?%d*),%s*(%-?%d+%.?%d*)")
		return Vector3.new(tonumber(x), tonumber(y), tonumber(z))
	end)
	return success and position or nil
end

local function stringToVector3Orientation(orientationString)
	local success, orientation = pcall(function()
		local x, y, z = orientationString:match("(%-?%d+%.?%d*),%s*(%-?%d+%.?%d*),%s*(%-?%d+%.?%d*)")
		return Vector3.new(tonumber(x), tonumber(y), tonumber(z))
	end)
	return success and orientation or nil
end

local function moveNpcToPosition(position)
	local success = pcall(function()
		local path = PathfindingService:CreatePath()
		path:ComputeAsync(npc.PrimaryPart.Position, position)
		local waypoints = path:GetWaypoints()
		for _, waypoint in ipairs(waypoints) do
			humanoid:MoveTo(waypoint.Position)
			humanoid.MoveToFinished:Wait()
		end

		-- Return true after reaching the destination
		return true
	end)
	return success
end

local function teleportNpcToPosition(position)
	local success = pcall(function()
		npc:SetPrimaryPartCFrame(CFrame.new(position))
	end)
	return success
end

local function setNpcOrientation(orientation)
	local success = pcall(function()
		npc.PrimaryPart.Orientation = orientation
	end)
	return success
end

local TweenService = game:GetService("TweenService")

local function rotateNpcToOrientation(orientation)
	local success, tween = pcall(function()
		local tweenInfo = TweenInfo.new(0.5)
		local targetOrientation = CFrame.fromOrientation(0, math.rad(orientation.Y), 0)
		local targetCFrame = CFrame.new(npc.PrimaryPart.Position) * targetOrientation
		local tween = TweenService:Create(npc.PrimaryPart, tweenInfo, {CFrame = targetCFrame})
		return tween
	end)
	if success and tween then
		tween:Play()
		return true
	else
		return false
	end
end

local function npcJump()
	local success = pcall(function()
		humanoid.Jump = true
	end)
	return success
end

local previousPosition = Vector3.new()

local function stopAllAnimations()
	for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
		track:Stop()
	end
end

local function playAnimation(animationName)
	stopAllAnimations()
	local animationTrack = humanoid:LoadAnimation(humanoid.Parent.Animate[animationName]:GetChildren()[1])
	animationTrack:Play()
end

local NpcState = {
	Idle = 1,
	Walking = 2,
	Jumping = 3
}

local function updateNpcAnimation(state)
	if state == NpcState.Idle then
		playAnimation("idle")
	elseif state == NpcState.Walking then
		playAnimation("walk")
	elseif state == NpcState.Jumping then
		-- Play jump animation when implemented
	end
end

local destinations = {}

local function fetchDestinations()
	local success, destinationsData = pcall(function()
		return getData("destinations", 1)
	end)

	if success and destinationsData ~= "" then
		local decodedDestinations = HttpService:JSONDecode(destinationsData)

		if type(decodedDestinations) == "table" then
			for _, destination in ipairs(decodedDestinations) do
				table.insert(destinations, {
					name = destination.name,
					position = stringToVector3(destination.positionData),
					orientation = stringToVector3Orientation(destination.orientationData)
				})
			end
		end
	end
end

local function positionChanged(newPosition)
	local distance = (previousPosition - newPosition).magnitude
	if distance >= 0.1 then
		previousPosition = newPosition
		return true
	end
	return false
end

local latestData = {
	position = nil,
	orientation = nil,
	chat = nil,
	jump = nil
}

local function updateNpc()
	while true do
		wait(0.1)
		if latestData.position then
			-- Check if the NPC is moving
			local newPosition = npc.PrimaryPart.Position
			if positionChanged(newPosition) then
				updateNpcAnimation(NpcState.Walking)
			else
				updateNpcAnimation(NpcState.Idle)
			end
		end

		if latestData.orientation then
			-- Rotate the NPC to the latest orientation
			rotateNpcToOrientation(latestData.orientation)
		end

		if latestData.jump then
			-- Make the NPC jump
			npcJump()
		end

		-- Reset the latest data
		latestData.position = nil
		latestData.orientation = nil
		latestData.chat = nil
		latestData.jump = nil
	end
end

fetchDestinations()

if #destinations > 0 then
	for _, destination in ipairs(destinations) do
		if moveNpcToPosition(destination.position) then
			rotateNpcToOrientation(destination.orientation)
		end
		wait(2)
	end
end

local pastDestinations = {}

local function moveNpc()
	while true do
		fetchDestinations()

		if #destinations > 0 then
			print("Destinations found:", #destinations)  -- Debug print
			for _, destination in ipairs(destinations) do
				local startTime = tick()  -- Record the start time

				if moveNpcToPosition(destination.position) then
					print("Moved to position:", destination.position)  -- Debug print
					latestData.position = destination.position
					latestData.orientation = destination.orientation

					-- Clear the past destinations table and add the new destination
					pastDestinations = {}
					table.insert(pastDestinations, destination.position)
				end

				-- Check if it took more than 5 seconds to reach the destination
				if tick() - startTime > 5 then
					print("Teleporting to position:", destination.position)  -- Debug print
					teleportNpcToPosition(destination.position)
				end

				wait(0.1)
			end
		else
			print("No destinations found")  -- Debug print
		end
	end
end

spawn(moveNpc)
spawn(updateNpc)
